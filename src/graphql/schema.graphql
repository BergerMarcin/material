# graphql-codegen demand only one `schema.graphql` file (see: https://github.com/dotansimha/graphql-code-generator/issues/1292)

enum RolesTypes {SUPERADMIN, ADMIN, USER}

# TODO: import Date from:
# GraphQLTimestamp.js
# https://github.com/excitement-engineer/graphql-iso-date
# or https://www.graphql-tools.com/docs/scalars/
# or https://www.apollographql.com/docs/apollo-server/schema/schema/#input-types
scalar Date


# ---------------------------------------------------- AuctionItems ----------------------------------------------------
type AuctionItemsMVC {
    id: ID!
    auction_id: ID!
    delivery_id: ID!
    position: Float!
    name: String!
    quantity: Float!
    description: String
    imgUrls: [String]!
    createdAt: Date!
}

# ------------------------------------------------------ Auctions ------------------------------------------------------
type AuctionsMVC {
    id: ID!
    user_id: ID!
    name: String!
    description: String
    imgUrl: String!
    startDate: Date!
    endDate: Date!
    createdAt: Date!
}

# ------------------------------------------------------ Currency ------------------------------------------------------
type CurrencyMVC {
    id: ID!
    name: String!
    valuePln: Float!
    apiUrl: String
    jsonProperty: String
    createdAt: Date!
    updatedAt: Date!
}

# --------------------------------------------------- DeliveryTypes ----------------------------------------------------
type DeliveryTypesMVC {
    id: ID!
    user_id: ID!
    name: String!
    description: String
    price: Float
    currencyId: ID!
}

# ------------------------------------------------------ Opinions ------------------------------------------------------
type OpinionsMVC {
    id: ID!
    auction_id: ID!
    nick: String!
    description: String
    rate: Int!
    createdAt: Date!
}

# -------------------------------------------------------- Users -------------------------------------------------------
type UsersMVC {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    role: RolesTypes!
    phone: String!
    city: String!
    ratesValue: Int!,
    ratesCount: Int!,
    createdAt: Date!
    updatedAt: Date
}

type Query {
    allUsers: [UsersMVC!]!
    User(id: ID!): UsersMVC!
}

type Mutation {
    createUser(data: CreateUserDataInput!): UsersMVC!
    updateUserData(id: ID!, data: UpdateUserDataInput!): UsersMVC
    updateUserPassword(id: ID!, data: UpdateUserPasswordInput!): UsersMVC
    updateUserRate(id: ID!, data: UpdateUserRateInput!): UsersMVC
}

input CreateUserDataInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phone: String!
    city: String!
    createdAt: Date!
}

input UpdateUserDataInput {
    firstName: String!
    lastName: String!
    email: String!
    phone: String!
    city: String!
    updatedAt: Date!
}

input UpdateUserPasswordInput {
    password: String!
}

input UpdateUserRateInput {
    ratesValue: Int!,
    ratesCount: Int!
}
